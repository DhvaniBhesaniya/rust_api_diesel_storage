sudo apt-get update
sudo apt-get install libsqlite3-dev

apt show libsqlite3-dev

cargo install diesel_cli --no-default-features --features sqlite








🗃️ Step 2.2: Setup Diesel
bash
Copy
Edit
diesel setup
This requires a .env file like:

env
Copy
Edit
DATABASE_URL=./task_manager.db



🛠️ Step 2.3: Create a migration
bash
Copy
Edit
diesel migration generate create_tasks



Edit the generated migration file:

sql
Copy
Edit
-- up.sql
CREATE TABLE tasks (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    completed BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- down.sql
DROP TABLE tasks;
Apply the migration:

bash
Copy
Edit
diesel migration run




// ----------------------------



info : 

libsqlite3-dev won't run in the terminal because it's not an executable program - it's a development package that contains:

•  Header files (.h files)
•  Static libraries (.a files) 
•  Other development tools needed for compiling programs

Think of it this way:
•  libsqlite3-dev = tools for building programs that use SQLite
•  sqlite3 = the actual program you run to interact with SQLite databases


To run SQL in the terminal, you need to install the sqlite3 command-line tool:
sudo apt-get install sqlite3




































Code Structure Analysis

Based on my analysis, here's the complete structure of your Rust Book Store API:

Project Structure:

rust_book_store_api/
├── src/
│   ├── main.rs          # Server entry point
│   ├── models/mod.rs    # Data models (Task, NewTask)
│   ├── handlers/mod.rs  # Route handlers/controllers
│   └── schema/mod.rs    # Database schema
├── migrations/          # Diesel database migrations
├── Cargo.toml          # Dependencies
├── .env                # Environment variables
└── task_manager.db     # SQLite database





API Details:
•  Framework: Actix-web
•  Database: SQLite with Diesel ORM
•  Server: Runs on 0.0.0.0:8080
•  Models: Task management system (not books as the name suggests)

Available Endpoints:

| Method | Endpoint      | Description        | Request Body |
|--------|---------------|-------------------|--------------|
| GET    | /tasks      | Get all tasks     | None         |
| POST   | /tasks      | Create new task   | JSON         |
| PUT    | /tasks/{id} | Update task       | JSON         |
| DELETE | /tasks/{id} | Delete task       | None         |

Data Models:

Task (Response):

{
  "id": 1,
  "title": "Sample task",
  "completed": false,
  "created_at": "2025-08-01T12:00:00"
}

NewTask (Request):

{
  "title": "Task title"
}



How to Send Requests

1. Start the Server:

cargo run


2. API Request Examples:

Get all tasks:


curl -X GET http://localhost:8080/tasks


Create a new task:

curl -X POST http://localhost:8080/tasks \
  -H "Content-Type: application/json" \
  -d '{"title": "Read a new book"}'

Update a task:

curl -X PUT http://localhost:8080/tasks/1 \
  -H "Content-Type: application/json" \
  -d '{"title": "Updated task title"}'


  Delete a task:

  curl -X DELETE http://localhost:8080/tasks/1


  3. Using Postman/Insomnia:
•  Base URL: http://localhost:8080
•  Set Content-Type: application/json for POST/PUT requests
•  Use the JSON format shown above for request bodies

4. Test with HTTPie:

# Get tasks
http GET localhost:8080/tasks

# Create task
http POST localhost:8080/tasks title="New book to read"

# Update task
http PUT localhost:8080/tasks/1 title="Updated title"

# Delete task
http DELETE localhost:8080/tasks/1






======================================================================================================================


# Complete ngrok Guide: Installation to Termination

## 📚 Step-by-step:

### Step 1: Install ngrok

#### Option A: Download and Install (Recommended)
```bash
wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
tar -xzf ngrok-v3-stable-linux-amd64.tgz
sudo mv ngrok /usr/local/bin/
ngrok version
```

#### Option B: Using Snap (Alternative)
```bash
sudo snap install ngrok
```

#### Option C: Using APT
```bash
curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
sudo apt update
sudo apt install ngrok
```

### Step 2: Setup ngrok Account & Authentication

1. [Create Account](https://ngrok.com/signup)
2. Add Authentication Token
```bash
ngrok config add-authtoken YOUR_TOKEN_HERE
```
3. Verify Config
```bash
ngrok config check
cat ~/.config/ngrok/ngrok.yml
```

### Step 3: ngrok Help & Commands

```bash
ngrok help
```

NAME:
  ngrok - tunnel local ports to public URLs and inspect traffic

USAGE:
  ngrok [command] [flags]

COMMANDS:
  api                            use ngrok agent as an api client
  completion                     generates shell completion code for bash or zsh
  config                         update or migrate ngrok's configuration file
  credits                        prints author and licensing information
  diagnose                       diagnose connection issues
  help                           Help about any command
  http                           start an HTTP tunnel
  service                        run and control an ngrok service on a target operating system
  start                          start endpoints or tunnels by name from the configuration file
  tcp                            start a TCP tunnel
  tls                            start a TLS tunnel
  tunnel                         start a tunnel for use with a tunnel-group backend
  update                         update ngrok to the latest version
  version                        print the version string

### Step 4: Start Your Local Server

```bash
# Navigate to your project directory
cd /path/to/your/project

# Start your Rust API server (or any local server)
cargo run

# Or in background:
cargo run &

# Verify server is running on expected port
ss -tlnp | grep 1234
# or
netstat -tlnp | grep 1234
```

### Step 5: Create ngrok Tunnel (Port Forwarding)

#### 5.1: Basic HTTP Tunnel (Foreground)
```bash
# Basic HTTP tunnel for port 1234
ngrok http 1234

# This will show:
# - Session Status: online
# - Forwarding URL: https://xxxxx.ngrok-free.app -> http://localhost:1234
# - Web Interface: http://127.0.0.1:4040
```

#### 5.2: HTTP Tunnel in Background
```bash
# Run ngrok in background and save output to log file
nohup ngrok http 1234 --log=stdout > ngrok.log 2>&1 &

# Check the process ID
echo $!

# View the log to get the forwarding URL
tail -f ngrok.log
```

#### 5.3: Get ngrok URL Programmatically
```bash
# Wait for ngrok to start and get the public URL
sleep 3 && curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"[^"]*"' | head -1

# Extract just the URL
curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url'
```

#### 5.4: Advanced Options
```bash
# Custom subdomain (requires paid plan)
ngrok http 1234 --subdomain=myapp

# Custom region
ngrok http 1234 --region=eu

# With basic auth
ngrok http 1234 --basic-auth="username:password"

# TCP tunnel (for non-HTTP services)
ngrok tcp 22

# Multiple ports
ngrok start --all  # (requires config file setup)
```

### Step 6: Monitor and Inspect Traffic

#### 6.1: Web Interface
```bash
# Open ngrok web interface in browser
# Go to: http://127.0.0.1:4040

# Or using command line
curl http://127.0.0.1:4040/api/tunnels
```

#### 6.2: Check Tunnel Status
```bash
# Get tunnel information
curl -s http://127.0.0.1:4040/api/tunnels | jq .

# Check specific tunnel
curl -s http://127.0.0.1:4040/api/tunnels/command_line
```

### Step 7: Test Your Forwarded URL

#### 7.1: Using curl
```bash
# Test API endpoint (replace with your actual ngrok URL)
curl -H "ngrok-skip-browser-warning: true" https://xxxxx.ngrok-free.app/tasks

# POST request example
curl -X POST https://xxxxx.ngrok-free.app/tasks \
  -H "Content-Type: application/json" \
  -H "ngrok-skip-browser-warning: true" \
  -d '{"title": "Test task"}'
```

#### 7.2: Browser Testing
```bash
# For browser requests, you may need to handle ngrok's browser warning
# Add this header in your JavaScript:
# headers: { 'ngrok-skip-browser-warning': 'true' }
```

### Step 8: CORS Setup for ngrok (If needed)

```rust
// In your Rust main.rs file
.wrap(
    Cors::default()
        .allowed_origins(vec![
            "http://localhost:3000",
            "http://127.0.0.1:5500",
            "https://your-ngrok-url.ngrok-free.app"  // Add your ngrok URL
        ])
        .allowed_methods(vec!["GET", "POST", "PUT", "DELETE", "OPTIONS"])
        .allowed_headers(vec![
            header::CONTENT_TYPE, 
            header::ACCEPT,
            header::HeaderName::from_static("ngrok-skip-browser-warning")
        ])
        .max_age(3600)
)
```

### Step 9: Troubleshooting Commands

```bash
# Check if ngrok is running
ps aux | grep ngrok

# Check which ports are listening
ss -tlnp

# Test local server directly
curl http://localhost:1234/your-endpoint

# Check ngrok logs
tail -f ngrok.log

# Diagnose connection issues
ngrok diagnose

# Update ngrok
ngrok update
```

### Step 10: Terminate Processes

#### 10.1: Stop ngrok
```bash
# Kill ngrok process
pkill ngrok

# Or if you know the process ID
kill PID_NUMBER

# Force kill if needed
pkill -9 ngrok
```

#### 10.2: Stop Your Server
```bash
# Kill your Rust server (replace with your actual process name)
pkill rust_book_store_api

# Or generic cargo process
pkill cargo

# Or if running in foreground, use Ctrl+C
```

#### 10.3: Clean Up
```bash
# Remove ngrok log file
rm ngrok.log

# Check no processes are running
ps aux | grep -E "(ngrok|rust_book_store)"
```

### Step 11: Complete Workflow Example

```bash
# 1. Start your server
cargo run &

# 2. Start ngrok tunnel
nohup ngrok http 1234 --log=stdout > ngrok.log 2>&1 &

# 3. Get the public URL
sleep 3
NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | grep -o '"public_url":"https://[^"]*"' | cut -d'"' -f4)
echo "Your API is available at: $NGROK_URL"

# 4. Test the API
curl -H "ngrok-skip-browser-warning: true" "$NGROK_URL/tasks"

# 5. When done, clean up
pkill ngrok
pkill rust_book_store_api
rm ngrok.log
```

🚀 This comprehensive guide covers everything from installation to cleanup!


